{"input_text": "Find all customers from California.", "output_text": "SELECT * FROM customers WHERE state = 'California';"}
{"input_text": "Show orders placed after January 1st, 2024.", "output_text": "SELECT * FROM orders WHERE order_date > '2024-01-01';"}
{"input_text": "List products by price from highest to lowest.", "output_text": "SELECT * FROM products ORDER BY price DESC;"}
{"input_text": "What is the total number of employees?", "output_text": "SELECT COUNT(*) FROM employees;"}
{"input_text": "Find all customer orders with their order details.", "output_text": "SELECT c.name, o.order_id, od.product_id FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id;"}
{"input_text": "Give me a list of all cities in the 'users' table.", "output_text": "SELECT DISTINCT city FROM users;"}
{"input_text": "Find all blog posts written by 'John' in the last month.", "output_text": "SELECT * FROM posts WHERE author = 'John' AND post_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"input_text": "What is the average rating for the product with ID 123?", "output_text": "SELECT AVG(rating) FROM reviews WHERE product_id = 123;"}
{"input_text": "Update the email address for customer ID 5 to 'new_email@example.com'.", "output_text": "UPDATE customers SET email = 'new_email@example.com' WHERE customer_id = 5;"}
{"input_text": "Delete all orders placed before January 1st, 2023.", "output_text": "DELETE FROM orders WHERE order_date < '2023-01-01';"}
{"input_text": "Find all users who registered after December 31st, 2022.", "output_text": "SELECT * FROM users WHERE registration_date > '2022-12-31';"}
{"input_text": "List all products with a price greater than $100.", "output_text": "SELECT * FROM products WHERE price > 100;"}
{"input_text": "Show all orders containing more than 5 items.", "output_text": "SELECT * FROM orders WHERE item_count > 5;"}
{"input_text": "Display all customers who have spent over $1000 in total.", "output_text": "SELECT c.name, SUM(od.price) AS total_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_details od ON o.order_id = od.order_id GROUP BY c.customer_id HAVING total_spent > 1000;"}
{"input_text": "Find the latest order placed by each customer.", "output_text": "SELECT * FROM orders o WHERE order_date = (SELECT MAX(order_date) FROM orders WHERE customer_id = o.customer_id);"}
{"input_text": "Show the total revenue generated in the past month.", "output_text": "SELECT SUM(total_price) FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"input_text": "List all products with names containing the word 'organic'.", "output_text": "SELECT * FROM products WHERE name LIKE '%organic%';"}
{"input_text": "Display the average age of users.", "output_text": "SELECT AVG(DATEDIFF(CURDATE(), birth_date)/365.25) AS average_age FROM users;"}
{"input_text": "Find all users who have not made any purchases.", "output_text": "SELECT * FROM users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM orders);"}
{"input_text": "Retrieve all orders with a discount greater than 10%.", "output_text": "SELECT * FROM orders WHERE discount > 0.10;"}
{"input_text": "List all employees hired after January 1st, 2023.", "output_text": "SELECT * FROM employees WHERE hire_date > '2023-01-01';"}
{"input_text": "Show the number of products in each category.", "output_text": "SELECT category, COUNT(*) AS product_count FROM products GROUP BY category;"}
{"input_text": "Display the total number of users.", "output_text": "SELECT COUNT(*) FROM users;"}
{"input_text": "Find all customers who have made purchases in the last 3 months.", "output_text": "SELECT * FROM customers WHERE customer_id IN (SELECT DISTINCT customer_id FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 3 MONTH));"}
{"input_text": "Show the average order value for each customer.", "output_text": "SELECT customer_id, AVG(total_price) AS avg_order_value FROM orders GROUP BY customer_id;"}
{"input_text": "Retrieve all orders placed on weekends.", "output_text": "SELECT * FROM orders WHERE DAYOFWEEK(order_date) IN (1,7);"}
{"input_text": "List all products with a stock quantity less than 10.", "output_text": "SELECT * FROM products WHERE stock_quantity < 10;"}
{"input_text": "Display the total number of orders for each customer.", "output_text": "SELECT customer_id, COUNT(*) AS order_count FROM orders GROUP BY customer_id;"}
{"input_text": "Find all users who have logged in within the last week.", "output_text": "SELECT * FROM users WHERE last_login > DATE_SUB(CURDATE(), INTERVAL 1 WEEK);"}
{"input_text": "Show the average time taken to ship orders.", "output_text": "SELECT AVG(DATEDIFF(shipping_date, order_date)) AS avg_shipping_time FROM orders WHERE shipping_date IS NOT NULL;"}
{"input_text": "Retrieve all orders with a total price greater than $500.", "output_text": "SELECT * FROM orders WHERE total_price > 500;"}
{"input_text": "List all products ordered by customers from California.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id JOIN customers c ON o.customer_id = c.customer_id WHERE c.state = 'California';"}
{"input_text": "Display the total number of orders placed in each month.", "output_text": "SELECT EXTRACT(YEAR_MONTH FROM order_date) AS month, COUNT(*) AS order_count FROM orders GROUP BY month;"}
{"input_text": "Find all users who have made a purchase in both January 2024 and February 2024.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(YEAR_MONTH FROM order_date) IN (202401, 202402) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(MONTH FROM order_date)) = 2;"}
{"input_text": "Show the total revenue generated in the past year.", "output_text": "SELECT SUM(total_price) FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR);"}
{"input_text": "List all products with a rating greater than 4.5.", "output_text": "SELECT * FROM products WHERE rating > 4.5;"}
{"input_text": "Display the average number of items per order.", "output_text": "SELECT AVG(item_count) FROM orders;"}
{"input_text": "Find all users who have not made a purchase in the last 6 months.", "output_text": "SELECT * FROM users WHERE user_id NOT IN (SELECT DISTINCT user_id FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 6 MONTH));"}
{"input_text": "Retrieve all orders placed between 8:00 AM and 12:00 PM.", "output_text": "SELECT * FROM orders WHERE EXTRACT(HOUR FROM order_time) BETWEEN 8 AND 12;"}
{"input_text": "List all products with a price between $50 and $100.", "output_text": "SELECT * FROM products WHERE price BETWEEN 50 AND 100;"}
{"input_text": "Display the total number of orders shipped via express delivery.", "output_text": "SELECT COUNT() FROM orders WHERE delivery_type = 'Express';"}
{"input_text": "Find all users who have birthdays in the current month.", "output_text": "SELECT * FROM users WHERE EXTRACT(MONTH FROM birth_date) = EXTRACT(MONTH FROM CURDATE());"}
{"input_text": "Show the highest total price among all orders.", "output_text": "SELECT MAX(total_price) FROM orders;"}
{"input_text": "Retrieve all orders placed in the last quarter.", "output_text": "SELECT * FROM orders WHERE order_date BETWEEN DATE_SUB(DATE_SUB(CURDATE(), INTERVAL EXTRACT(MONTH FROM CURDATE())-1 MONTH), INTERVAL 2 MONTH) AND DATE_SUB(CURDATE(), INTERVAL EXTRACT(MONTH FROM CURDATE()) MONTH);"}
{"input_text": "List all products with descriptions longer than 100 characters.", "output_text": "SELECT * FROM products WHERE LENGTH(description) > 100;"}
{"input_text": "Display the average rating for products in each category.", "output_text": "SELECT category, AVG(rating) AS avg_rating FROM products GROUP BY category;"}
{"input_text": "Find all users who have not logged in within the last month.", "output_text": "SELECT * FROM users WHERE last_login < DATE_SUB(CURDATE(), INTERVAL 1 MONTH);"}
{"input_text": "Show the number of orders placed on each day of the week.", "output_text": "SELECT DAYNAME(order_date) AS day_of_week, COUNT() AS order_count FROM orders GROUP BY day_of_week;"}
{"input_text": "Retrieve all orders containing products with 'organic' in their name.", "output_text": "SELECT * FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.name LIKE '%organic%';"}
{"input_text": "List all products with a creation date before January 1st, 2023.", "output_text": "SELECT * FROM products WHERE creation_date < '2023-01-01';"}
{"input_text": "Display the total number of orders shipped to each country.", "output_text": "SELECT country, COUNT() AS order_count FROM orders GROUP BY country;"}
{"input_text": "Find all users who have not updated their profile in the last 3 months.", "output_text": "SELECT * FROM users WHERE profile_update_date < DATE_SUB(CURDATE(), INTERVAL 3 MONTH);"}
{"input_text": "Show the average order value for each month in the past year.", "output_text": "SELECT EXTRACT(YEAR_MONTH FROM order_date) AS month, AVG(total_price) AS avg_order_value FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY month;"}
{"input_text": "Retrieve all orders placed by users aged between 25 and 35.", "output_text": "SELECT * FROM orders o JOIN users u ON o.user_id = u.user_id WHERE TIMESTAMPDIFF(YEAR, u.birth_date, CURDATE()) BETWEEN 25 AND 35;"}
{"input_text": "List all products ordered by users from New York.", "output_text": "SELECT p. FROM products p JOIN order_details od ON p.product_id = od.product_id JOIN orders o ON od.order_id = o.order_id JOIN users u ON o.user_id = u.user_id WHERE u.city = 'New York';"}
{"input_text": "Display the total revenue generated on weekends.", "output_text": "SELECT SUM(total_price) FROM orders WHERE DAYOFWEEK(order_date) IN (1,7);"}
{"input_text": "Find all users who have made purchases on their birthdays.", "output_text": "SELECT * FROM users u JOIN orders o ON u.user_id = o.user_id WHERE EXTRACT(MONTH FROM u.birth_date) = EXTRACT(MONTH FROM o.order_date) AND EXTRACT(DAY FROM u.birth_date) = EXTRACT(DAY FROM o.order_date);"}
{"input_text": "Show the most expensive product in each category.", "output_text": "SELECT * FROM products WHERE (category, price) IN (SELECT category, MAX(price) FROM products GROUP BY category);"}
{"input_text": "Retrieve all orders containing products with a rating above 4.0.", "output_text": "SELECT * FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE p.rating > 4.0;"}
{"input_text": "List all users who have made purchases with a total price above $1000.", "output_text": "SELECT u.* FROM users u JOIN orders o ON u.user_id = o.user_id WHERE o.total_price > 1000;"}
{"input_text": "Display the average time between order placement and shipping.", "output_text": "SELECT AVG(DATEDIFF(shipping_date, order_date)) AS avg_shipping_time FROM orders WHERE shipping_date IS NOT NULL;"}
{"input_text": "Find all orders where the shipping city is different from the billing city.", "output_text": "SELECT * FROM orders WHERE shipping_city <> billing_city;"}
{"input_text": "Show the total number of products in stock.", "output_text": "SELECT SUM(stock_quantity) FROM products;"}
{"input_text": "Retrieve all orders placed on weekdays.", "output_text": "SELECT * FROM orders WHERE DAYOFWEEK(order_date) BETWEEN 2 AND 6;"}
{"input_text": "List all products with a price ending in .99.", "output_text": "SELECT * FROM products WHERE price LIKE '%.99';"}
{"input_text": "Display the total revenue generated from online orders.", "output_text": "SELECT SUM(total_price) FROM orders WHERE order_type = 'Online';"}
{"input_text": "Find all users who have made purchases in the last 24 hours.", "output_text": "SELECT * FROM users WHERE user_id IN (SELECT DISTINCT user_id FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 DAY));"}
{"input_text": "Show the top 10 most frequently purchased products.", "output_text": "SELECT product_id, COUNT(*) AS purchase_count FROM order_details GROUP BY product_id ORDER BY purchase_count DESC LIMIT 10;"}
{"input_text": "Retrieve all orders containing products ordered by users with 'gmail.com' email addresses.", "output_text": "SELECT * FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN users u ON o.user_id = u.user_id WHERE u.email LIKE '%@gmail.com%';"}
{"input_text": "List all users who have made more than 5 purchases.", "output_text": "SELECT u.* FROM users u JOIN (SELECT user_id, COUNT() AS purchase_count FROM orders GROUP BY user_id HAVING COUNT() > 5) AS purchases ON u.user_id = purchases.user_id;"}
{"input_text": "Display the total number of orders placed by users from each city.", "output_text": "SELECT u.city, COUNT(o.order_id) AS order_count FROM users u JOIN orders o ON u.user_id = o.user_id GROUP BY u.city;"}
{"input_text": "Find all orders where the shipping country is different from the billing country.", "output_text": "SELECT * FROM orders WHERE shipping_country <> billing_country;"}
{"input_text": "Show the average rating for products in stock.", "output_text": "SELECT AVG(rating) FROM products WHERE stock_quantity > 0;"}
{"input_text": "Retrieve all orders containing products with a price increase of more than 10% since their creation.", "output_text": "SELECT o.* FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE od.unit_price > (p.price * 1.1);"}
{"input_text": "List all users who have made purchases in both January 2023 and January 2024.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(YEAR_MONTH FROM order_date) IN (202301, 202401) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(YEAR FROM order_date)) = 2;"}
{"input_text": "Display the total revenue generated from each product category.", "output_text": "SELECT p.category, SUM(o.total_price) AS category_revenue FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id GROUP BY p.category;"}
{"input_text": "Find all users who have made purchases on weekends.", "output_text": "SELECT * FROM users WHERE user_id IN (SELECT DISTINCT user_id FROM orders WHERE DAYOFWEEK(order_date) IN (1,7));"}
{"input_text": "Show the average order value for each day of the week.", "output_text": "SELECT DAYNAME(order_date) AS day_of_week, AVG(total_price) AS avg_order_value FROM orders GROUP BY day_of_week;"}
{"input_text": "Retrieve all orders placed by users with an age between 18 and 25.", "output_text": "SELECT o.* FROM orders o JOIN users u ON o.user_id = u.user_id WHERE TIMESTAMPDIFF(YEAR, u.birth_date, CURDATE()) BETWEEN 18 AND 25;"}
{"input_text": "List all products ordered in quantities greater than 10.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.quantity > 10;"}
{"input_text": "Display the total revenue generated from each shipping method.", "output_text": "SELECT shipping_method, SUM(total_price) AS revenue FROM orders GROUP BY shipping_method;"}
{"input_text": "Find all users who have made purchases with a total price decrease of more than 20% since their last purchase.", "output_text": "SELECT u.* FROM users u JOIN (SELECT user_id, MAX(order_date) AS last_purchase_date FROM orders GROUP BY user_id) AS last_purchase ON u.user_id = last_purchase.user_id JOIN orders o ON u.user_id = o.user_id WHERE o.total_price < (SELECT total_price FROM orders WHERE user_id = u.user_id AND order_date = last_purchase_date) * 0.8;"}
{"input_text": "Show the average number of days between orders for each user.", "output_text": "SELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER (PARTITION BY user_id ORDER BY order_date))) AS avg_days_between_orders FROM orders GROUP BY user_id;"}
{"input_text": "Retrieve all orders containing products with a price decrease of more than 15% since their creation.", "output_text": "SELECT o.* FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE od.unit_price < (p.price * 0.85);"}
{"input_text": "List all users who have made purchases in both December 2022 and December 2023.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(YEAR_MONTH FROM order_date) IN (202212, 202312) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(YEAR FROM order_date)) = 2;"}
{"input_text": "Display the total revenue generated from each user.", "output_text": "SELECT user_id, SUM(total_price) AS revenue FROM orders GROUP BY user_id;"}
{"input_text": "Find all orders where the billing city is different from the shipping city.", "output_text": "SELECT * FROM orders WHERE billing_city <> shipping_city;"}
{"input_text": "Show the average rating for products in each price range ($0-$50, $50-$100, $100-$200, $200+).", "output_text": "SELECT CASE WHEN price BETWEEN 0 AND 50 THEN '0-50' WHEN price BETWEEN 51 AND 100 THEN '50-100' WHEN price BETWEEN 101 AND 200 THEN '100-200' ELSE '200+' END AS price_range, AVG(rating) AS avg_rating FROM products GROUP BY price_range;"}
{"input_text": "Retrieve all orders placed by users with 'yahoo.com' email addresses.", "output_text": "SELECT * FROM orders o JOIN users u ON o.user_id = u.user_id WHERE u.email LIKE '%@yahoo.com%';"}
{"input_text": "List all products with a price increase of more than $50 since their creation.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.unit_price > p.price + 50;"}
{"input_text": "Display the total number of orders placed on weekdays vs weekends.", "output_text": "SELECT CASE WHEN DAYOFWEEK(order_date) IN (1,7) THEN 'Weekend' ELSE 'Weekday' END AS day_type, COUNT() AS order_count FROM orders GROUP BY day_type;"}
{"input_text": "Find all users who have made purchases with a total price increase of more than 30% since their last purchase.", "output_text": "SELECT u. FROM users u JOIN (SELECT user_id, MAX(order_date) AS last_purchase_date FROM orders GROUP BY user_id) AS last_purchase ON u.user_id = last_purchase.user_id JOIN orders o ON u.user_id = o.user_id WHERE o.total_price > (SELECT total_price FROM orders WHERE user_id = u.user_id AND order_date = last_purchase_date) * 1.3;"}
{"input_text": "Show the average order value for each hour of the day.", "output_text": "SELECT EXTRACT(HOUR FROM order_time) AS hour_of_day, AVG(total_price) AS avg_order_value FROM orders GROUP BY hour_of_day;"}
{"input_text": "List all users who have made purchases in both January and July of any year.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(MONTH FROM order_date) IN (1, 7) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(MONTH FROM order_date)) = 2;"}
{"input_text": "Display the total revenue generated from each product.", "output_text": "SELECT product_id, SUM(total_price) AS revenue FROM order_details GROUP BY product_id;"}
{"input_text": "Find all orders where the billing country is different from the shipping country.", "output_text": "SELECT * FROM orders WHERE billing_country <> shipping_country;"}
{"input_text": "Show the average rating for products in each year of creation.", "output_text": "SELECT EXTRACT(YEAR FROM creation_date) AS creation_year, AVG(rating) AS avg_rating FROM products GROUP BY creation_year;"}
{"input_text": "Retrieve all orders containing products with a discount greater than 20%.", "output_text": "SELECT o.* FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE od.discount > 0.20;"}
{"input_text": "List all products with a price decrease of more than $20 since their creation.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.unit_price < p.price - 20;"}
{"input_text": "Display the total revenue generated from each user in the last month.", "output_text": "SELECT user_id, SUM(total_price) AS revenue FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY user_id;"}
{"input_text": "Find all users who have made purchases in both Q1 and Q3 of any year.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(QUARTER FROM order_date) IN (1, 3) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(QUARTER FROM order_date)) = 2;"}
{"input_text": "Show the average order value for each product category.", "output_text": "SELECT category, AVG(total_price) AS avg_order_value FROM order_details od JOIN products p ON od.product_id = p.product_id GROUP BY category;"}
{"input_text": "Retrieve all orders placed by users who have made purchases in both 2023 and 2024.", "output_text": "SELECT o.* FROM orders o JOIN (SELECT user_id FROM orders WHERE EXTRACT(YEAR FROM order_date) IN (2023, 2024) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(YEAR FROM order_date)) = 2) AS user_purchases ON o.user_id = user_purchases.user_id;"}
{"input_text": "List all products with a rating increase of more than 0.5 since their creation.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.rating > p.rating + 0.5;"}
{"input_text": "Display the total revenue generated from each shipping country.", "output_text": "SELECT shipping_country, SUM(total_price) AS revenue FROM orders GROUP BY shipping_country;"}
{"input_text": "Find all users who have made purchases in both Q2 and Q4 of any year.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(QUARTER FROM order_date) IN (2, 4) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(QUARTER FROM order_date)) = 2;"}
{"input_text": "Show the average rating for products in each month of creation.", "output_text": "SELECT EXTRACT(MONTH FROM creation_date) AS creation_month, AVG(rating) AS avg_rating FROM products GROUP BY creation_month;"}
{"input_text": "Retrieve all orders containing products with a quantity increase of more than 5 since their creation.", "output_text": "SELECT o.* FROM orders o JOIN order_details od ON o.order_id = od.order_id JOIN products p ON od.product_id = p.product_id WHERE od.quantity > p.stock_quantity + 5;"}
{"input_text": "List all products with a price decrease of more than 10% since their creation.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.unit_price < p.price * 0.90;"}
{"input_text": "Display the total revenue generated from each billing city.", "output_text": "SELECT billing_city, SUM(total_price) AS revenue FROM orders GROUP BY billing_city;"}
{"input_text": "Find all users who have made purchases in both Q1 and Q2 of any year.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(QUARTER FROM order_date) IN (1, 2) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(QUARTER FROM order_date)) = 2;"}
{"input_text": "Show the average order value for each billing country.", "output_text": "SELECT billing_country, AVG(total_price) AS avg_order_value FROM orders GROUP BY billing_country;"}
{"input_text": "Retrieve all orders placed by users who have made purchases in both 2022 and 2023.", "output_text": "SELECT o.* FROM orders o JOIN (SELECT user_id FROM orders WHERE EXTRACT(YEAR FROM order_date) IN (2022, 2023) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(YEAR FROM order_date)) = 2) AS user_purchases ON o.user_id = user_purchases.user_id;"}
{"input_text": "List all products with a rating increase of more than 1 since their creation.", "output_text": "SELECT p.* FROM products p JOIN order_details od ON p.product_id = od.product_id WHERE od.rating > p.rating + 1;"}
{"input_text": "Display the total revenue generated from each billing country in the last month.", "output_text": "SELECT billing_country, SUM(total_price) AS revenue FROM orders WHERE order_date > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY billing_country;"}
{"input_text": "Find all users who have made purchases in both Q3 and Q4 of any year.", "output_text": "SELECT user_id FROM orders WHERE EXTRACT(QUARTER FROM order_date) IN (3, 4) GROUP BY user_id HAVING COUNT(DISTINCT EXTRACT(QUARTER FROM order_date)) = 2;"}
{"input_text": "Show the average rating for products in each billing city.", "output_text": "SELECT billing_city, AVG(rating) AS avg_rating FROM order_details od JOIN products p ON od.product_id = p.product_id GROUP BY billing_city;"}
{"input_text": "Show orders placed between January 1st and March 31st, 2023, with a total value exceeding $100.", "output_text": "SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-03-31' AND total_value > 100;"}
{"input_text": "Find customers who haven't placed an order in the last 30 days.", "output_text": "SELECT * FROM customers WHERE last_order_date < DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY);"}
{"input_text": "List all products with a JSON description containing the keyword 'organic'.", "output_text": "SELECT * FROM products WHERE JSON_CONTAINS(description, 'organic');"}
{"input_text": "Get employees whose salary falls within the range of 50,000 to 100,000.", "output_text": "SELECT * FROM employees WHERE salary BETWEEN 50000 AND 100000;"}
{"input_text": "Find all orders shipped to California with a timestamp between 10:00 AM and 2:00 PM on March 15th, 2023.", "output_text": "SELECT * FROM orders WHERE shipping_state = 'California' AND shipping_timestamp BETWEEN '2023-03-15 10:00:00' AND '2023-03-15 14:00:00';"}
{"input_text": "Find the average order value.", "output_text": "SELECT AVG(total_value) FROM orders;"}
{"input_text": "Count the number of active employees.", "output_text": "SELECT COUNT(*) FROM employees WHERE active = TRUE;"}
{"input_text": "List all orders with customer details.", "output_text": "SELECT o.*, c.name FROM orders o JOIN customers c ON o.customer_id = c.id;"}
{"input_text": "Find customers who placed orders for products costing more than 100.", "output_text": "SELECT * FROM customers WHERE id IN (SELECT customer_id FROM orders WHERE product_id IN (SELECT id FROM products WHERE price > 100));"}
{"input_text": "Find all customers within a 10km radius of a specific location.", "output_text": "SELECT * FROM customers WHERE ST_DWithin(location, ST_GeomFromText('POINT(longitude latitude)'), 10000);"}
{"input_text": "Show all products with a specific set of attributes.", "output_text": "SELECT * FROM products WHERE attributes = ARRAY['attribute1', 'attribute2'];"}
{"input_text": "Get all employees with a specific job title and department.", "output_text": "SELECT * FROM employees WHERE job_title = 'Manager' AND department = 'Sales';"}
{"input_text": "Retrieve all columns except 'number' and 'gender' from customers;"}
{"input_text": "Calculate the sum of the 'col' column from the 'project_id.dataset_name.table_name' table, filtering data where '_PARTITIONTIME' is between '2022-01-01' and '2022-08-30'.", "output_text":"SELECT SUM(col) FROM `project_id.dataset_name.table_name` WHERE _PARTITIONTIME BETWEEN TIMESTAMP('2022-01-01') AND TIMESTAMP('2022-08-30')"}
{"input_text": "Count the total number of records from the 'wikipedia.pageviews_2015' table where the month extracted from 'datehour' is 5, the year extracted from 'datehour' is 2015, and the 'wiki' column is equal to 'pi'.", "output_text":"SELECT count(*) as total_count FROM `wikipedia.pageviews_2015` WHERE  EXTRACT(MONTH from datehour) = 5 AND EXTRACT(YEAR from datehour) = 2015 AND wiki= 'pi'"}
{"input_text": "Perform a windowed sum calculation over the 'number' column partitioned by the 'sale' column.","output_text": "SELECT sale, SUM(number) OVER (PARTITION BY sale) AS `window` FROM (SELECT 'Books' AS sale, 2 AS number UNION ALL SELECT 'Cloths' AS sale, 3 AS number UNION ALL SELECT 'Books' AS sale, 6 AS number) AS table_3"}
{"input_text": "Extract the value of the 'city' field from the JSON object using JSON_QUERY, and convert a struct to a JSON string using TO_JSON_STRING.","output_text": "SELECT JSON_QUERY('{\"order_id\": 3456, \"name\": \"Asma\",\"address\": {\"street\": \"Av Saint\",\"city\": \"paris\"}}', '$.address.city'), TO_JSON_STRING(STRUCT(3009 AS order_id, STRUCT('Abo' AS name)))"}  
{"input_text": "Create a temporary JavaScript function called 'Addition' that adds 1 to the input value and apply it to each element in the array using UNNEST.", "output_text": "CREATE TEMP FUNCTION Addition(x FLOAT64) RETURNS FLOAT64 LANGUAGE js AS 'return x+1;'; SELECT val, Addition(val) AS result FROM UNNEST([1, 2, 3, 4, 5]) AS val;"}
